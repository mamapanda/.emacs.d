#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Phan
* Package Initialization
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq-default package-archives
                '(("gnu"     . "https://elpa.gnu.org/packages/")
                  ("melpa"        . "https://melpa.org/packages/")
                  ("melpa-stable" . "https://stable.melpa.org/packages/"))
                package-archive-priorities
                '(("gnu" . 1)
                  ("melpa" . 10)
                  ("melpa-stable" . 0)))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC
* Customize File
Move Emacs's customize settings to a separate file.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom-file.el" user-emacs-directory))
  (load custom-file 'noerror)
#+END_SRC
* Use-Package Setup
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
* Appearance
*** Defaults
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        ring-bell-function 'ignore
        visible-bell nil)

  (setq-default truncate-lines t)

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)

  (set-frame-font "Consolas-10")
#+END_SRC
*** Full Screen on Start
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :defer t)

  (use-package spacemacs-theme
    :defer t)

  (load-theme 'monokai t)
#+END_SRC
*** Mode Line
#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :ensure spaceline
    :config
    (spaceline-emacs-theme)
    (spaceline-toggle-buffer-size-off)
    (spaceline-toggle-buffer-modified-off)
    (spaceline-toggle-hud-off))
#+END_SRC
*** Diminish
Hide ~abbrev-mode~ and ~auto-revert-mode~ from the mode line.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :config
    (diminish 'abbrev-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
*** Line Numbers
Use ~C-c n~ to toggle line numbers. They're off by default.
#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :bind (("C-c n" . nlinum-mode)))
#+END_SRC
*** Cursor Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config
    (setq beacon-blink-when-window-scrolls t
          beacon-blink-when-window-changes t
          beacon-blink-when-point-moves nil)
    (beacon-mode 1))
#+END_SRC
*** Nyan Cat Position Bar
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode t))
#+END_SRC
*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* General Defaults
*** Settings
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil
        c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "linux"))
        disabled-command-function nil
        make-backup-files nil)

  (setq-default c-basic-offset 4
                indent-tabs-mode nil
                tab-width 4)

  (delete-selection-mode 1)
  (electric-pair-mode 1)
  (show-paren-mode 1)

  (global-auto-revert-mode t)
#+END_SRC
*** Delete Trailing Whitespace on Save
Delete trailing whitespace on save if ~panda/delete-trailing-whitespace?~ is not nil.
#+BEGIN_SRC emacs-lisp
  (defvar-local panda/delete-trailing-whitespace? nil)

  (add-hook 'before-save-hook
            (lambda ()
              (when panda/delete-trailing-whitespace?
                (delete-trailing-whitespace))))
#+END_SRC
* General Key Definitions
*** Cutting Text
~C-w~ - If a region is selected, cut it; else, cut the current line.
#+BEGIN_SRC emacs-lisp
  (defun panda/kill-text ()
    (interactive)
    (call-interactively (if (region-active-p)
                            'kill-region
                          'kill-whole-line)))

  (global-set-key (kbd "C-w") #'panda/kill-text)
#+END_SRC
*** Deleting All Whitespace Before Cursor
~M-backspace~ - Deletes whitespace until a non-whitespace character is encountered.
#+BEGIN_SRC emacs-lisp
  (defun panda/kill-whitespace ()
    (interactive)
    (while (string-match (char-to-string (char-before)) " \r\n\t")
      (call-interactively 'delete-backward-char)))

  (global-set-key "\M-\d" #'panda/kill-whitespace)
#+END_SRC
*** Keybind Help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (setq which-key-popup-type 'side-window
          which-key-side-window-location 'bottom
          which-key-idle-delay 1.0)
    (which-key-mode 1))
#+END_SRC
* General Constants
*** Colors
Colors that look nice with Monokai.
#+BEGIN_SRC emacs-lisp
  (defconst panda/neon-green "#39FF14")
  (defconst panda/light-blue "#67C8FF")
  (defconst panda/deep-saffron "#FF9933")
#+END_SRC
* Miscellaneous Packages
#+BEGIN_SRC emacs-lisp
  (use-package esup
    :defer t)

  (use-package fireplace
    :defer t)

  (use-package hydra
    :defer t)

  (use-package pacmacs
    :defer t)
#+END_SRC
* Editing
*** Workspaces
Swap between workspaces 0-9 with ~C-c e <workspace-number>~.
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :init
    (setq eyebrowse-keymap-prefix "e")
    :config
    (eyebrowse-mode 1))
#+END_SRC
*** Crux
Miscellaneous functions.
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :bind (("C-c x e" . crux-eval-and-replace)
           ("C-c x t" . crux-transpose-windows)
           ("C-c x d" . crux-delete-file-and-buffer)
           ("C-c x c" . crux-copy-file-preserve-attributes)
           ("C-c x r" . crux-rename-file-and-buffer)
           ("C-c x i" . crux-find-user-init-file)))
#+END_SRC
*** Find and Replace
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :bind (("C-c r" . anzu-query-replace))
    :config
    (global-anzu-mode t))
#+END_SRC
*** Moving Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package corral
    :bind (("C-c c" . hydra-corral/body))
    :config
    (defhydra hydra-corral (:hint nil :color pink)
      "
corral
[_{_]: braces backward         [_}_]: braces forward
[_[_]: brackets backward       [_]_]: brackets forward
[_(_]: parentheses backward    [_)_]: parentheses forward
[_/_]: cancel"
      ("{" corral-braces-backward)
      ("}" corral-braces-forward)
      ("[" corral-brackets-backward)
      ("]" corral-brackets-forward)
      ("(" corral-parentheses-backward)
      (")" corral-parentheses-forward)
      ("/" (message "Abort") :color blue)))
#+END_SRC
*** Expanding Selected Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-;" . er/expand-region)))
#+END_SRC
*** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-c m" . hydra-multiple-cursors/body))
    :config
    (defhydra hydra-multiple-cursors (:hint nil :color pink)
      "
multiple-cursors
[_p_]: mc/mark-previous-like-this    [_n_]: mc/mark-next-like-this
[_l_]: mc/edit-lines                 [_a_]: mc/mark-all-like-this
[_/_]: cancel"
      ("p" mc/mark-previous-like-this)
      ("n" mc/mark-next-like-this)
      ("l" mc/edit-lines :color blue)
      ("a" mc/mark-all-like-this :color blue)
      ("/" (message "Abort") :color blue)))
#+END_SRC
*** Hiding/Showing Code Blocks
#+BEGIN_SRC emacs-lisp
    (use-package origami
      :demand t
      :bind (:map origami-mode-map
                  ("C-c o" . hydra-origami/body))
      :config
      (defhydra hydra-origami (:hint nil :color pink)
        "
  origami
  [_p_]: previous fold     [_n_]: next fold
  [_o_]: open fold         [_c_]: close fold         [_t_]: toggle fold         [_s_]: show only fold
  [_O_]: open all folds    [_C_]: close all folds    [_T_]: toggle all folds
  [_r_]: reset             [_/_]: cancel"
        ("p" origami-previous-fold)
        ("n" origami-forward-fold)
        ("o" origami-open-node)
        ("c" origami-close-node)
        ("t" origami-toggle-node)
        ("s" origami-show-only-node)
        ("O" origami-open-all-nodes :color blue)
        ("C" origami-close-all-nodes :color blue)
        ("T" origami-toggle-all-nodes :color blue)
        ("r" origami-reset :color blue)
        ("/" (message "Abort") :color blue))
      (global-origami-mode))
#+END_SRC
*** Undo/Redo
More natural undo/redo behavior. ~C-x u~ opens the undo tree.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :demand t
    :bind (:map undo-tree-map
                ("C-." . undo-tree-redo)
                ("C-?" . nil))
    :config
    (global-undo-tree-mode))
#+END_SRC
*** Undo/Redo Window Configuration
~C-<left>~ to undo; ~C-<right>~ to redo.
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :config
    (winner-mode t))
#+END_SRC
* Ivy Completion
~flx~ and ~smex~ give better regex sorting and completion sorting, respectively.
#+BEGIN_SRC emacs-lisp
  (use-package flx
    :defer t)

  (use-package smex
    :defer t)

  (use-package ivy
    :ensure counsel
    :diminish ivy-mode
    :demand t
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           ("C-s" . swiper)
           ("C-c s" . counsel-rg)
           ("C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("M-y" . counsel-yank-pop)
           :map ivy-minibuffer-map
           ("<return>" . ivy-alt-done))
    :config
    (ivy-mode 1)
    (setq ivy-wrap t
          ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                  (t . ivy--regex-fuzzy))
          confirm-nonexistent-file-or-buffer t
          ivy-count-format "(%d/%d) ")
    (set-face-attribute 'ivy-minibuffer-match-face-2 nil
                        :foreground panda/neon-green
                        :weight 'bold)
    (set-face-attribute 'ivy-minibuffer-match-face-3 nil
                        :foreground panda/light-blue
                        :weight 'bold)
    (set-face-attribute 'ivy-minibuffer-match-face-4 nil
                        :foreground panda/deep-saffron
                        :weight 'bold)
    (set-face-attribute 'ivy-confirm-face nil
                        :foreground panda/neon-green))
#+END_SRC
* Navigation
*** Jumping Between Windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind (("C-x o" . ace-window))
    :config
    (set-face-attribute 'aw-leading-char-face nil
                        :foreground panda/neon-green
                        :weight 'bold))
#+END_SRC
*** Jumping to a Word
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("C-c SPC" . avy-goto-word-1))
    :config
    (set-face-attribute 'avy-lead-face nil
                        :foreground panda/neon-green
                        :background (face-attribute 'default :background)
                        :weight 'bold)
    (set-face-attribute 'avy-lead-face-0 nil
                        :foreground panda/light-blue
                        :background (face-attribute 'default :background)
                        :weight 'bold)
    (set-face-attribute 'avy-lead-face-2 nil
                        :foreground panda/deep-saffron
                        :background (face-attribute 'default :background)
                        :weight 'bold)
    (setq avy-background t))
#+END_SRC
*** Jumping with IMenu
#+BEGIN_SRC emacs-lisp
  (use-package imenu
    :defer t
    :bind (("C-c i" . imenu))
    :config
    (setq imenu-auto-rescan t))
#+END_SRC
*** Navigating a Directory
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :after projectile
    :bind (("C-c t" . panda/neotree-toggle))
    :config
    (defun panda/neotree-toggle ()
      (interactive)
      (if (get-buffer-window " *NeoTree*" 'visible)
          (neotree-hide)
        (if (projectile-project-p)
            (neotree-dir (projectile-project-root))
          (neotree-show))))
    (setq neo-theme 'arrow
          neo-window-width 30
          neo-window-position 'left))
#+END_SRC
*** Project Navigation
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind-keymap (("C-c p" . projectile-command-map))
    :config
    (projectile-mode)
    (setq projectile-indexing-method 'alien
          projectile-completion-system 'ivy))
#+END_SRC
* Source Control
*** Git Interface
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-c g" . magit-status))
    :config
    (setq magit-auto-revert-mode nil))
#+END_SRC
*** Git Timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :defer t)
#+END_SRC
* Debugging
Call ~M-x load-library~ on ~realgud~ to load the package.
Use ~realgud:<debugger-name>~ to run the debugger.
#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :defer t)
#+END_SRC
* Per-Language Modes
*** Auto-Completion
Activate with ~company-mode~.
~C-w~ is unbound in ~company-active-map~ because it interferes with ~kill-line~.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)
                ("C-w" . nil))
    :config
    (delete 'company-dabbrev company-backends)
    (setq company-dabbrev-code-modes nil
          company-idle-delay 0.1
          company-minimum-prefix-length 1
          company-tooltip-align-annotations t))
#+END_SRC
*** Aggressive Indent
Activate with ~aggressive-indent-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent)
#+END_SRC
*** Error Checking
Activate with ~flycheck-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :demand t
    :bind (("C-c f" . hydra-flycheck/body))
    :config
    (defhydra hydra-flycheck (:hint nil :color pink)
      "
  flycheck
  [_p_]: previous error    [_n_]: next error
  [_/_]: cancel"
        ("p" flycheck-previous-error)
        ("n" flycheck-next-error)
        ("/" (message "Abort") :color blue))
      (setq flycheck-check-syntax-automatically '(mode-enabled save)))
#+END_SRC
*** Code Snippets
Activate with ~yas-minor-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs `(,(expand-file-name "snippets" user-emacs-directory)))
    (yas-reload-all)
    (eval-after-load 'company
      (define-advice company-complete-selection (:around (old-func))
        (if (bound-and-true-p yas-minor-mode)
            (let ((yas-fallback-behavior nil))
              (unless (call-interactively #'yas-expand)
                (call-interactively old-func)))
          (call-interactively old-func))))
    (setq yas-triggers-in-field t
          yas-indent-line 'auto
          yas-also-auto-indent-first-line t))
#+END_SRC
* Language Modes
*** Assembly
Used for GNU Assembler.
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-asm-mode ()
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t)
    (setq-local tab-always-indent (default-value 'tab-always-indent)))

  (use-package asm-mode
    :defer t
    :config
    (add-hook 'asm-mode-hook #'panda/setup-asm-mode)
    (setq asm-comment-char ?#))
#+END_SRC
*** C / C++
~irony~ requires libclang to function properly.
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-c-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (c-set-style "linux")
    (c-set-offset 'inline-open '0)
    (setq panda/delete-trailing-whitespace? t
          c-basic-offset 4))

  (add-hook 'c-mode-hook #'panda/setup-c-mode)
  (add-hook 'c++-mode-hook #'panda/setup-c-mode)

  (use-package irony
    :defer t
    :init
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    :config
    (defun my-irony-mode-hook ()
      "Set up irony-mode."
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (when (boundp 'w32-pipe-read-delay)
      (setq w32-pipe-read-delay 0))
    (when (boundp 'w32-pipe-buffer-size)
      (setq irony-server-w32-pipe-buffer-size (* 64 1024))))

  (use-package company-irony
    :after company-irony-c-headers
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package company-irony-c-headers
    :after irony
    :config
    (add-to-list 'company-backends 'company-irony-c-headers))

  (use-package flycheck-irony
    :after irony
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC
*** C#
~omnisharp~ requires the [[https://github.com/OmniSharp/omnisharp-roslyn][OmniSharp server]]
to be at ~<emacs-directory>/omnisharp/OmniSharp.exe~.
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-csharp-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package csharp-mode
    :defer t
    :config
    (add-hook 'csharp-mode-hook #'panda/setup-csharp-mode))

  (use-package omnisharp
    :defer t
    :init
    (defconst panda/omnisharp-exe-path
      (expand-file-name "omnisharp/OmniSharp.exe" user-emacs-directory))
    (defun panda/omnisharp-mode()
      "Activates omnisharp-mode only if the server is present."
      (when (file-exists-p panda/omnisharp-exe-path)
        (omnisharp-mode)))
    (add-hook 'csharp-mode-hook #'panda/omnisharp-mode)
    :config
    (setq omnisharp-server-executable-path panda/omnisharp-exe-path)
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
*** Clojure
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-clojure-mode ()
    (aggressive-indent-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package clojure-mode
    :defer t
    :config
    (add-hook 'clojure-mode-hook #'panda/setup-clojure-mode))
#+END_SRC
*** Common Lisp
~slime~ requires the [[http://www.sbcl.org/platform-table.html][sbcl]] executable (Steel Bank Common Lisp).
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-slime-mode ()
    (aggressive-indent-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package slime
    :defer t
    :config
    (add-hook 'slime-mode-hook #'panda/setup-slime-mode)
    (setq inferior-lisp-program (executable-find "sbcl"))
    (slime-setup '(slime-fancy)))
#+END_SRC
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-emacs-lisp-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (add-hook 'emacs-lisp-mode-hook #'panda/setup-emacs-lisp-mode)
#+END_SRC
*** Go
~go-eldoc~ and ~company-go~ need [[https://github.com/nsf/gocode][gocode]].
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-go-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package go-mode
    :defer t
    :config
    (add-hook 'go-mode-hook #'panda/setup-go-mode))

  (use-package go-eldoc
    :after go-mode
    :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))

  (use-package company-go
    :after go-mode
    :config
    (add-to-list 'company-backends 'company-go))
#+END_SRC
*** Haskell
~intero~ depends on [[https://docs.haskellstack.org/en/stable/install_and_upgrade/][stack]].
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-haskell-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package haskell-mode
    :defer t
    :config
    (add-hook 'haskell-mode-hook #'panda/setup-haskell-mode))

  (use-package intero
    :after haskell-mode
    :init
    (add-hook 'haskell-mode-hook #'intero-mode)
    :config
    (flycheck-add-next-checker 'intero '(info . haskell-hlint)))
#+END_SRC
*** HTML / PHP / ASP.NET / Embedded Ruby
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-web-mode ()
    (aggressive-indent-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package web-mode
    :defer t
    :mode (("\\.php\\'" . web-mode)
           ("\\.as[cp]x\\'" . web-mode)
           ("\\.erb\\'" . web-mode)
           ("\\.html?\\'" . web-mode))
    :config
    (add-hook 'web-mode-hook #'panda/setup-web-mode)
    (setq web-mode-markup-indent-offset 2
          web-mode-style-padding 4
          web-mode-script-padding 4
          web-mode-block-padding 4))
#+END_SRC
*** Java
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-java-mode ()
    (aggressive-indent-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (add-hook 'java-mode-hook #'panda/setup-java-mode)
#+END_SRC
*** JavaScript
~tern~ depends on [[https://www.npmjs.com/package/tern][tern]].
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-javascript-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package js2-mode
    :defer t
    :mode (("\\.js\\'" . js2-mode))
    :config
    (add-hook 'js2-mode-hook #'panda/setup-javascript-mode))

  (use-package tern
    :defer t
    :init
    (add-hook 'js2-mode-hook #'tern-mode))

  (use-package company-tern
    :after tern
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-markdown-mode ()
    (yas-minor-mode 1))

  (use-package markdown-mode
    :defer t
    :config
    (add-hook 'markdown-mode-hook #'panda/setup-markdown-mode))
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-org-mode ()
    (setq panda/delete-trailing-whitespace? t))

  (use-package org
    :defer t
    :config
    (add-hook 'org-mode-hook #'panda/setup-org-mode)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t))
#+END_SRC
*** PowerShell
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-powershell-mode ()
    (aggressive-indent-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package powershell
    :defer t
    :config
    (add-hook 'powershell-mode-hook #'panda/setup-powershell-mode))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-python-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t)
    (setq-local yas-indent-line 'fixed)
    (setq-local yas-also-auto-indent-first-line 'nil))

  (use-package python
    :defer t
    :config
    (add-hook 'python-mode-hook #'panda/setup-python-mode)
    (setq python-indent-offset 4))

  (use-package anaconda-mode
    :defer t
    :init
    (add-hook 'python-mode-hook #'anaconda-mode)
    (add-hook 'python-mode-hook #'anaconda-eldoc-mode))

  (use-package company-anaconda
    :after anaconda-mode
    :config
    (add-to-list 'company-backends 'company-anaconda))
#+END_SRC
*** Rust
~racer~ needs [[https://github.com/racer-rust/racer][racer]] to be installed.
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-rust-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (if (locate-dominating-file default-directory "cargo.toml")
        (flycheck-mode 1))
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package rust-mode
    :defer t
    :config
    (add-hook 'rust-mode-hook #'panda/setup-rust-mode))

  (use-package racer
    :defer t
    :init
    (add-hook 'rust-mode-hook #'racer-mode))

  (use-package flycheck-rust
    :defer t
    :init
    (add-hook 'rust-mode-hook #'flycheck-rust-setup))
#+END_SRC
*** TypeScript
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-typescript-mode ()
    (aggressive-indent-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (setq panda/delete-trailing-whitespace? t))

  (use-package typescript-mode
    :defer t
    :config
    (add-hook 'typescript-mode-hook #'panda/setup-typescript-mode))

  (use-package tide
    :defer t
    :init
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (tide-hl-identifier-mode +1))
    (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
