#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Phan
* Package Management
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq-default package-archives
                '(("gnu"     . "https://elpa.gnu.org/packages/")
                  ("melpa"        . "https://melpa.org/packages/")
                  ("melpa-stable" . "https://stable.melpa.org/packages/"))
                package-archive-priorities
                '(("gnu" . 1)
                  ("melpa" . 10)
                  ("melpa-stable" . 0)))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
* Customize File
Move Emacs's customize settings to a separate file.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom-file.el" user-emacs-directory))
  (load custom-file 'noerror)
#+END_SRC
* Evil
#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :defer t)

  (use-package evil
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-tutor
    :defer t)

  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-escape
    :after evil
    :config
    (evil-escape-mode 1)
    (setq-default evil-escape-key-sequence "fd")
    (setq-default evil-escape-delay 0.1))
#+END_SRC
* Appearance
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        ring-bell-function 'ignore
        visible-bell nil)

  (setq-default truncate-lines t)

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)

  (set-frame-font "Consolas-10")
#+END_SRC
** Full Screen on Start
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :defer t)

  (use-package spacemacs-theme
    :defer t)

  (load-theme 'monokai t)
#+END_SRC
** Mode Line
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-init)
    (setq doom-modeline-icon nil
          doom-modeline-buffer-file-name-style 'relative-from-project))
#+END_SRC
** Diminish
Hide ~abbrev-mode~ and ~auto-revert-mode~ from the mode line.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :config
    (diminish 'abbrev-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (linum-relative-global-mode 1)
    (setq linum-relative-backend 'display-line-numbers-mode))
#+END_SRC
** Cursor Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config
    (setq beacon-blink-when-window-scrolls t
          beacon-blink-when-window-changes t
          beacon-blink-when-point-moves nil)
    (beacon-mode 1))
#+END_SRC
** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Leader Keymap
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-override-mode)
    (general-evil-setup)
    (general-define-key
     :states '(insert normal operator motion replace visual)
     :keymaps 'override
     :prefix "SPC"
     :non-normal-prefix "M-p"
     :prefix-map 'panda/leader-map)
    (general-create-definer panda/general-leader
      :keymaps 'panda/leader-map)
    (general-create-definer panda/general-buffer
      :wrapping panda/general-leader
      :prefix "b"
      :prefix-command 'buffer-prefix)
    (general-create-definer panda/general-file
      :wrapping panda/general-leader
      :prefix "f"
      :prefix-command 'file-prefix)
    (general-create-definer panda/general-git
      :wrapping panda/general-leader
      :prefix "g"
      :prefix-command 'git-prefix)
    (general-create-definer panda/general-navigation
      :wrapping panda/general-leader
      :prefix "n"
      :prefix-command 'navigation-prefix)
    (general-create-definer panda/general-workspace
      :wrapping panda/general-leader
      :prefix "q"
      :prefix-command 'workspace-prefix)
    (general-create-definer panda/general-editing
      :wrapping panda/general-leader
      :prefix "e"
      :prefix-command 'editing-prefix)
    (general-create-definer panda/general-window
      :wrapping panda/general-leader
      :prefix "w"
      :prefix-command 'window-prefix))
#+END_SRC
* Basic Configuration
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil
        c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "linux"))
        disabled-command-function nil
        inhibit-compacting-font-caches t
        make-backup-files nil)

  (setq-default buffer-file-coding-system 'utf-8
                c-basic-offset 4
                indent-tabs-mode nil
                tab-width 4)

  (delete-selection-mode 1)
  (electric-pair-mode 1)
  (show-paren-mode 1)

  (global-auto-revert-mode t)
#+END_SRC
** Key Definitions
*** Keybind Help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (setq which-key-popup-type 'side-window
          which-key-side-window-location 'bottom
          which-key-idle-delay 1.0)
    (which-key-mode 1))
#+END_SRC
** Constants
*** Colors
Colors that look nice with Monokai.
#+BEGIN_SRC emacs-lisp
  (defconst panda/neon-green "#39FF14")
  (defconst panda/light-blue "#67C8FF")
  (defconst panda/deep-saffron "#FF9933")
#+END_SRC
* Miscellaneous Packages
#+BEGIN_SRC emacs-lisp
  (use-package esup
    :defer t)

  (use-package fireplace
    :defer t)

  (use-package hydra
    :defer t)

  (use-package pacmacs
    :defer t)
#+END_SRC
* Global Packages
** Multi-Purpose
*** Ivy / Counsel / Swiper
~flx~ and ~smex~ give better regex sorting and completion sorting, respectively.

Dependencies:
- [[https://github.com/BurntSushi/ripgrep][ripgrep]]
#+BEGIN_SRC emacs-lisp
  (use-package flx
    :defer t)

  (use-package smex
    :defer t)

  (use-package ivy
    :diminish ivy-mode
    :demand t
    :general
    (panda/general-leader "s" 'swiper)
    (panda/general-buffer
      "b" 'ivy-switch-buffer
      "k" 'kill-buffer)
    (general-imap
      :keymaps 'ivy-minibuffer-map
      "<return>" 'ivy-alt-done)
    :config
    (ivy-mode 1)
    (setq ivy-wrap t
          ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                  (t . ivy--regex-fuzzy))
          confirm-nonexistent-file-or-buffer t
          ivy-count-format "(%d/%d) ")
    (set-face-attribute 'ivy-minibuffer-match-face-2 nil
                        :foreground panda/neon-green
                        :weight 'bold)
    (set-face-attribute 'ivy-minibuffer-match-face-3 nil
                        :foreground panda/light-blue
                        :weight 'bold)
    (set-face-attribute 'ivy-minibuffer-match-face-4 nil
                        :foreground panda/deep-saffron
                        :weight 'bold)
    (set-face-attribute 'ivy-confirm-face nil
                        :foreground panda/neon-green))

  (use-package counsel
    :demand t
    :general
    (panda/general-file
      "f" 'counsel-find-file)
    (panda/general-navigation
      "r" 'counsel-rg)
    (panda/general-editing
      "p" 'counsel-yank-pop)
    :config
    (counsel-mode 1))
#+END_SRC
*** Crux
Miscellaneous functions.
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :general
    (panda/general-file
      "c" 'crux-copy-file-preserve-attributes
      "d" 'crux-delete-file-and-buffer
      "i" 'crux-find-user-init-file
      "r" 'crux-rename-file-and-buffer)
    (panda/general-editing
      "e" 'crux-eval-and-replace)
    (panda/general-window
      "t" 'crux-transpose-windows))
#+END_SRC
** Buffer
Empty for now.
** Debugging
Call ~M-x load-library~ on ~realgud~ to load the package.
Use ~realgud:<debugger-name>~ to run the debugger.
#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :defer t)
#+END_SRC
** Editing
*** Anzu
Better find-and-replace.
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :general
    (panda/general-editing "r" 'anzu-query-replace)
    :config
    (global-anzu-mode t))

  (use-package evil-anzu)
#+END_SRC
*** Corral
Move braces, brackets, and parentheses.
#+BEGIN_SRC emacs-lisp
  (use-package corral
    :general
    (panda/general-editing "b" 'hydra-corral/body)
    :config
    (defhydra hydra-corral (:hint nil :color pink)
      "
  corral
  [_{_]: braces backward         [_}_]: braces forward
  [_[_]: brackets backward       [_]_]: brackets forward
  [_(_]: parentheses backward    [_)_]: parentheses forward
  [_/_]: cancel"
        ("{" corral-braces-backward)
        ("}" corral-braces-forward)
        ("[" corral-brackets-backward)
        ("]" corral-brackets-forward)
        ("(" corral-parentheses-backward)
        (")" corral-parentheses-forward)
        ("/" (message "Abort") :color blue)))
#+END_SRC
*** Expand Region
Expand selected region.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :general
    (general-imap "C-;" 'er/expand-region)
    (general-vmap ";" 'er/expand-region))
#+END_SRC
*** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :general
    (panda/general-editing "m" 'hydra-multiple-cursors/body)
    :config
    (defhydra hydra-multiple-cursors (:hint nil :color pink)
      "
  multiple-cursors
  [_p_]: mc/mark-previous-like-this    [_n_]: mc/mark-next-like-this
  [_l_]: mc/edit-lines                 [_a_]: mc/mark-all-like-this
  [_/_]: cancel"
        ("p" mc/mark-previous-like-this)
        ("n" mc/mark-next-like-this)
        ("l" mc/edit-lines :color blue)
        ("a" mc/mark-all-like-this :color blue)
        ("/" (message "Abort") :color blue)))
#+END_SRC
*** Undo Tree
Linear undo and redo.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :demand t
    :general
    (panda/general-editing
     "u" 'undo-tree-visualize)
    :config
    (global-undo-tree-mode))
#+END_SRC
** File
Empty for now.
** Git
*** Magit
Git interface.

Dependencies:
- [[https://git-scm.com/downloads][git]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    (panda/general-git "g" 'magit-status)
    :config
    (setq magit-auto-revert-mode nil))

  (use-package evil-magit
    :after magit)
#+END_SRC
*** Git Timemachine
Walk through git history.

Dependencies:
- [[https://git-scm.com/downloads][git]]
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :general
    (panda/general-git "t" 'git-timemachine))
#+END_SRC
** Navigation
*** Avy
Jump to a word on the screen.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :general
    (panda/general-leader
      "SPC" 'avy-goto-word-1)
    :config
    (set-face-attribute 'avy-lead-face nil
                        :foreground panda/neon-green
                        :background (face-attribute 'default :background)
                        :weight 'bold)
    (set-face-attribute 'avy-lead-face-0 nil
                        :foreground panda/light-blue
                        :background (face-attribute 'default :background)
                        :weight 'bold)
    (set-face-attribute 'avy-lead-face-2 nil
                        :foreground panda/deep-saffron
                        :background (face-attribute 'default :background)
                        :weight 'bold)
    (setq avy-background t))
#+END_SRC
*** IMenu
Jump between definitions.
#+BEGIN_SRC emacs-lisp
  (use-package imenu
    :defer t
    :general
    (panda/general-navigation "i" 'imenu)
    :config
    (setq imenu-auto-rescan t))
#+END_SRC
*** Neotree
Navigate a directory.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :after projectile
    :general
    (panda/general-file "t" 'panda/neotree-toggle)
    :config
    (defun panda/neotree-toggle ()
      (interactive)
      (if (get-buffer-window " *NeoTree*" 'visible)
          (neotree-hide)
        (if (projectile-project-p)
            (neotree-dir (projectile-project-root))
          (neotree-show))))
    (setq neo-theme 'arrow
          neo-window-width 30
          neo-window-position 'left))
#+END_SRC
*** Origami
Show, hide, and navigate code blocks.
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :demand t
    :general
    (panda/general-navigation "f" 'hydra-origami/body)
    :config
    (defhydra hydra-origami (:hint nil :color pink)
      "
  origami
  [_p_]: previous fold     [_n_]: next fold
  [_o_]: open fold         [_c_]: close fold         [_t_]: toggle fold         [_s_]: show only fold
  [_O_]: open all folds    [_C_]: close all folds    [_T_]: toggle all folds
  [_r_]: reset             [_/_]: cancel"
        ("p" origami-previous-fold)
        ("n" origami-forward-fold)
        ("o" origami-open-node)
        ("c" origami-close-node)
        ("t" origami-toggle-node)
        ("s" origami-show-only-node)
        ("O" origami-open-all-nodes :color blue)
        ("C" origami-close-all-nodes :color blue)
        ("T" origami-toggle-all-nodes :color blue)
        ("r" origami-reset :color blue)
        ("/" (message "Abort") :color blue))
      (global-origami-mode))
#+END_SRC
** Project
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :general
    (panda/general-leader
      :prefix "p"
      :prefix-command 'projectile-command-map)
    :config
    (projectile-mode)
    (setq projectile-indexing-method 'alien
          projectile-completion-system 'ivy))
#+END_SRC
** Window
*** Ace Window
Jump quickly between multiple windows.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :general
    (panda/general-window "w" 'ace-window)
    :config
    (set-face-attribute 'aw-leading-char-face nil
                        :foreground panda/neon-green
                        :weight 'bold))
#+END_SRC
*** Eyebrowse
Workspaces.
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :general
    (panda/general-window
      "0" 'eyebrowse-switch-to-window-config-0
      "1" 'eyebrowse-switch-to-window-config-1
      "2" 'eyebrowse-switch-to-window-config-2
      "3" 'eyebrowse-switch-to-window-config-3
      "4" 'eyebrowse-switch-to-window-config-4
      "5" 'eyebrowse-switch-to-window-config-5
      "6" 'eyebrowse-switch-to-window-config-6
      "7" 'eyebrowse-switch-to-window-config-7
      "8" 'eyebrowse-switch-to-window-config-8
      "9" 'eyebrowse-switch-to-window-config-9)
    :config
    (eyebrowse-mode 1))
#+END_SRC
*** Winner
Undo/redo changes in window configuration.
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :general
    (panda/general-window
      "u" 'winner-undo
      "r" 'winner-redo)
    :config
    (winner-mode t))
#+END_SRC
* Per-Language Packages
** Company
Activate auto-completion with ~company-mode~.

~C-w~ is unbound in ~company-active-map~ because it interferes with ~kill-line~.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :config
    (delete 'company-dabbrev company-backends)
    (setq company-dabbrev-code-modes nil
          company-idle-delay 0.1
          company-minimum-prefix-length 2
          company-tooltip-align-annotations t))
#+END_SRC
** Format All
Auto-formats source files on save. Activate with ~format-all-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package format-all)
#+END_SRC
** Flycheck
Linting. Activate with ~flycheck-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :demand t
    :general
    (panda/general-navigation "e" 'hydra-flycheck/body)
    :config
    (defhydra hydra-flycheck (:hint nil :color pink)
      "
  flycheck
  [_p_]: previous error    [_n_]: next error
  [_/_]: cancel"
      ("p" flycheck-previous-error)
      ("n" flycheck-next-error)
      ("/" (message "Abort") :color blue))
    (setq flycheck-check-syntax-automatically '(mode-enabled save)))
#+END_SRC
** Lsp
Activate with ~lsp~.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :demand t
    :config
    (require 'lsp-clients))

  (use-package company-lsp
    :defer t)

  (use-package lsp-ui
    :defer t)
#+END_SRC
** Yasnippet
Code snippets. Activate with ~yas-minor-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :demand t
    :config
    (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory))
    (yas-reload-all)
    (setq yas-triggers-in-field t
          yas-indent-line 'auto
          yas-also-auto-indent-first-line t))

  (use-package yasnippet-snippets
    :after yasnippet)

  (use-package ivy-yasnippet
    :after yasnippet
    :general
    (panda/general-editing "s" 'ivy-yasnippet))
#+END_SRC
* Language Modes
** Assembly
Used for GNU Assembler.

Dependencies:
- [[https://github.com/klauspost/asmfmt][asmfmt]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-asm-mode ()
    (format-all-mode 1)
    (yas-minor-mode 1)
    (setq indent-tabs-mode t)
    (setq-local tab-always-indent (default-value 'tab-always-indent)))

  (use-package asm-mode
    :defer t
    :config
    (add-hook 'asm-mode-hook #'panda/setup-asm-mode)
    (setq asm-comment-char ?#))
#+END_SRC
** C / C++
Dependencies:
- [[https://releases.llvm.org/download.html][clang]]
- [[https://releases.llvm.org/download.html][clangd]]
- [[https://releases.llvm.org/download.html][clang-format]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-c-mode ()
    (yas-minor-mode 1)
    (c-set-style "linux")
    (c-set-offset 'inline-open '0)
    (c-set-offset 'innamespace 0)
    (setq c-basic-offset 4))

  (add-hook 'c-mode-hook #'panda/setup-c-mode)
  (add-hook 'c++-mode-hook #'panda/setup-c-mode)

  (use-package ccls
    :hook ((c-mode c++-mode) . (lambda ()
                                 (interactive)
                                 (require 'ccls)
                                 (lsp)))
    :custom
    (ccls-executable
     (expand-file-name "lsp-servers/ccls/ccls" user-emacs-directory)))

  (use-package clang-format
    :defer t
    :init
    (defvar panda/default-clang-format-file
      (expand-file-name "default-files/.clang-format" user-emacs-directory))
    (defun panda/default-clang-format-style ()
      (with-temp-buffer
        (insert-file-contents panda/default-clang-format-file)
        (let ((lines (split-string (buffer-string) "\n" t)))
          (format "{%s}" (string-join lines ", ")))))
    (defun panda/enable-clang-format ()
      (setq-local clang-format-style
                  (if (locate-dominating-file "." ".clang-format")
                      "file"
                    (panda/default-clang-format-style)))
      (add-hook 'before-save-hook #'clang-format-buffer nil t))
    (add-hook 'c-mode-hook #'panda/enable-clang-format)
    (add-hook 'c++-mode-hook #'panda/enable-clang-format))
#+END_SRC
** C#
Dependencies:
- [[https://github.com/OmniSharp/omnisharp-roslyn][omnisharp-roslyn server]]
  - can be installed with ~M-x omnisharp-install-server~
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-csharp-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package csharp-mode
    :defer t
    :config
    (add-hook 'csharp-mode-hook #'panda/setup-csharp-mode))

  (use-package omnisharp
    :defer t
    :init
    (add-hook 'csharp-mode-hook #'omnisharp-mode)
    :config
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-clojure-mode ()
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package clojure-mode
    :defer t
    :config
    (add-hook 'clojure-mode-hook #'panda/setup-clojure-mode))
#+END_SRC
** CMake
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-cmake-mode ()
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace))

  (use-package cmake-mode
    :defer t
    :config
    (add-hook 'cmake-mode-hook #'panda/setup-cmake-mode))
#+END_SRC
** Common Lisp
Dependencies:
- [[http://www.sbcl.org/platform-table.html][sbcl]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-slime-mode ()
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package slime
    :defer t
    :config
    (add-hook 'slime-mode-hook #'panda/setup-slime-mode)
    (setq inferior-lisp-program (executable-find "sbcl"))
    (slime-setup '(slime-fancy)))
#+END_SRC
** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-emacs-lisp-mode ()
    (company-mode 1)
    (format-all-mode 1)
    (yas-minor-mode 1))

  (add-hook 'emacs-lisp-mode-hook #'panda/setup-emacs-lisp-mode)
#+END_SRC
** Git Files
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-gitfiles-mode ()
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package gitattributes-mode
    :defer t
    :config
    (add-hook 'gitattributes-mode-hook #'panda/setup-gitfiles-mode))

  (use-package gitconfig-mode
    :defer t
    :config
    (add-hook 'gitconfig-mode-hook #'panda/setup-gitfiles-mode))

  (use-package gitignore-mode
    :defer t
    :config
    (add-hook 'gitignore-mode-hook #'panda/setup-gitfiles-mode))
#+END_SRC
** Go
Dependencies:
- [[https://github.com/nsf/gocode][gocode]]
- [[https://golang.org/cmd/gofmt/][gofmt]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-go-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (format-all-mode 1)
    (yas-minor-mode 1)
    (setq indent-tabs-mode t))

  (use-package go-mode
    :defer t
    :config
    (add-hook 'go-mode-hook #'panda/setup-go-mode))

  (use-package go-eldoc
    :after go-mode
    :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))

  (use-package company-go
    :after go-mode
    :config
    (add-to-list 'company-backends 'company-go))
#+END_SRC
** Haskell
Dependencies:
- [[https://docs.haskellstack.org/en/stable/install_and_upgrade/][stack]]
- [[https://github.com/lspitzner/brittany][brittany]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-haskell-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (format-all-mode 1)
    (yas-minor-mode 1))

  (use-package haskell-mode
    :defer t
    :config
    (add-hook 'haskell-mode-hook #'panda/setup-haskell-mode))

  (use-package intero
    :after haskell-mode
    :init
    (add-hook 'haskell-mode-hook #'intero-mode)
    :config
    (flycheck-add-next-checker 'intero '(info . haskell-hlint)))
#+END_SRC
** HTML / PHP / ASP.NET / Embedded Ruby
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-web-mode ()
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package web-mode
    :defer t
    :mode (("\\.php\\'" . web-mode)
           ("\\.as[cp]x\\'" . web-mode)
           ("\\.erb\\'" . web-mode)
           ("\\.html?\\'" . web-mode))
    :config
    (add-hook 'web-mode-hook #'panda/setup-web-mode)
    (setq web-mode-markup-indent-offset 2
          web-mode-style-padding 4
          web-mode-script-padding 4
          web-mode-block-padding 4))
#+END_SRC
** Java
~panda/enable-clang-format~ is defined under the C/C++ section.

Dependencies
- [[https://releases.llvm.org/download.html][clang-format]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-java-mode ()
    (yas-minor-mode 1)
    (panda/enable-clang-format))

  (add-hook 'java-mode-hook #'panda/setup-java-mode)
#+END_SRC
** JavaScript
~panda/enable-clang-format~ is defined under the C/C++ section.

Dependencies:
- [[https://www.npmjs.com/package/tern][tern]]
- [[https://releases.llvm.org/download.html][clang-format]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-javascript-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1)
    (panda/enable-clang-format))

  (use-package js2-mode
    :defer t
    :mode (("\\.js\\'" . js2-mode))
    :config
    (add-hook 'js2-mode-hook #'panda/setup-javascript-mode))

  (use-package tern
    :defer t
    :init
    (add-hook 'js2-mode-hook #'tern-mode))

  (use-package company-tern
    :after tern
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC
** Makefile
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-makefile-mode ()
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (add-hook 'makefile-mode-hook #'panda/setup-makefile-mode)
#+END_SRC
** Markdown
Dependencies:
- [[https://prettier.io/docs/en/install.html][prettier]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-markdown-mode ()
    (format-all-mode 1)
    (yas-minor-mode 1))

  (use-package markdown-mode
    :defer t
    :config
    (add-hook 'markdown-mode-hook #'panda/setup-markdown-mode))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-org-mode ()
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package org
    :defer t
    :config
    (add-hook 'org-mode-hook #'panda/setup-org-mode)
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t))

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook #'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme))))
#+END_SRC
** PowerShell
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-powershell-mode ()
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package powershell
    :defer t
    :config
    (add-hook 'powershell-mode-hook #'panda/setup-powershell-mode))
#+END_SRC
** Python
Dependencies:
- [[https://www.python.org/downloads/][python]]
- [[https://pypi.org/project/setuptools/][setuptools]]
- [[https://flake8.readthedocs.io/en/latest/][flake8]] or [[https://pylint.org/#install][pylint]]
- [[https://github.com/ambv/black][black]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-python-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (format-all-mode 1)
    (yas-minor-mode 1)
    (setq-local yas-indent-line 'fixed)
    (setq-local yas-also-auto-indent-first-line nil))

  (use-package python
    :defer t
    :config
    (add-hook 'python-mode-hook #'panda/setup-python-mode)
    (setq python-indent-offset 4))

  (use-package anaconda-mode
    :defer t
    :init
    (add-hook 'python-mode-hook #'anaconda-mode)
    (add-hook 'python-mode-hook #'anaconda-eldoc-mode))

  (use-package company-anaconda
    :after anaconda-mode
    :config
    (add-to-list 'company-backends 'company-anaconda))
#+END_SRC
** Rust
Dependencies:
- [[https://www.rust-lang.org/en-US/install.html][cargo]]
- [[https://github.com/racer-rust/racer][racer]]
- [[https://github.com/rust-lang-nursery/rustfmt][rustfmt]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-rust-mode ()
    (company-mode 1)
    (if (locate-dominating-file default-directory "Cargo.toml")
        (flycheck-mode 1))
    (yas-minor-mode 1)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (use-package rust-mode
    :defer t
    :config
    (add-hook 'rust-mode-hook #'panda/setup-rust-mode)
    (setq rust-format-on-save t))

  (use-package cargo
    :defer t
    :init
    (add-hook 'rust-mode-hook #'cargo-minor-mode))

  (use-package racer
    :defer t
    :init
    (add-hook 'rust-mode-hook #'racer-mode))

  (use-package flycheck-rust
    :defer t
    :init
    (add-hook 'rust-mode-hook #'flycheck-rust-setup))
#+END_SRC
** TypeScript
Dependencies:
- [[https://www.typescriptlang.org/#download-links][tsc]]
- [[https://nodejs.org/en/][node.js]]
#+BEGIN_SRC emacs-lisp
  (defun panda/setup-typescript-mode ()
    (company-mode 1)
    (flycheck-mode 1)
    (yas-minor-mode 1))

  (use-package typescript-mode
    :defer t
    :config
    (add-hook 'typescript-mode-hook #'panda/setup-typescript-mode))

  (use-package tide
    :defer t
    :init
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (tide-hl-identifier-mode +1)
      (add-hook 'before-save-hook #'tide-format-before-save nil t))
    (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
